// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

enum Role {
  User
  Admin
}

model User {
  id        String @id @default(uuid()) @db.Uuid
  username  String @unique
  password  String
  firstname String @map("first_name")
  lastname  String @map("last_name")
  role      Role   @default(User)

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  token Token?

  @@map("user")
}

model Token {
  id      String @id @default(uuid()) @db.Uuid
  refresh String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  @@map("token")
}

model Image {
  id      String @id @default(uuid()) @db.Uuid
  type    String
  name    String @unique
  content Bytes  @db.ByteA

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  experiencePictures ExperiencePictureOnImage[]

  @@map("image")
}

model Company {
  id      String @id @default(uuid()) @db.Uuid
  name    String
  preview String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  experiences Experience[]

  @@map("company")
}

model Accomplishment {
  id      String @id @default(uuid()) @db.Uuid
  content String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  experienceId String     @map("experience_id") @db.Uuid

  @@map("accomplishment")
}

model Experience {
  id       String   @id @default(uuid()) @db.Uuid
  position String
  start    DateTime
  end      DateTime

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  company            Company             @relation(fields: [companyId], references: [id])
  companyId          String              @map("company_id") @db.Uuid
  accomplishments    Accomplishment[]
  experiencePictures ExperiencePicture[]

  @@map("experience")
}

model ExperiencePicture {
  id     String @id @default(uuid()) @db.Uuid
  side   String
  screen String

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")

  experience   Experience @relation(fields: [experienceId], references: [id], onDelete: Cascade)
  experienceId String     @map("experience_id") @db.Uuid

  image ExperiencePictureOnImage[]

  @@map("experience_picture")
}

model ExperiencePictureOnImage {
  experiencePicture   ExperiencePicture @relation(fields: [experiencePictureId], references: [id], onDelete: Cascade)
  experiencePictureId String            @map("experience_picture_id") @db.Uuid
  image               Image             @relation(fields: [imageId], references: [id], onDelete: Cascade)
  imageId             String            @map("image_id") @db.Uuid

  @@id(fields: [experiencePictureId, imageId], name: "experience_picture_image")
  @@map("experience_picture_on_image")
}
